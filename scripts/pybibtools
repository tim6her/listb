#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os.path
import requests
import yaml

import click
import bibtexparser

import listb.normalizetex as normalizetex
import listb.pybibtools as bibtools

READERS = {'bib': lambda fin: bibtexparser.load(fin).get_entry_list(),
           'yaml': yaml.load
          }
WRITERS = {'bib': bibtools.bibtex_dump,
           'yaml': yaml.dump
          }

def load(reader, fil):
    """ Common interface for loading all readers
    
    Args:
        reader (str):   name of reader
        fil (str):      path to input file
    
    Returns:
        (dict): dictionary holding data of input file
    """
    with open(fil, 'r') as fin:
        return READERS[reader](fin)

def get_formats(f, t, o, files):
    """ Chooses reader and writer based on user options
    
    Args:
        f (str):            name of reader
        t (str):            name of writer
        o (click.File):     filehandle pointing to output file
        files (List[str]):  paths to input files
    
    Returns:
        (str, str): Name of reader and name of writer
    """
    if not files:
        raise click.UsageError('At least one file must be specified.')

    if not f:
        exts_f = [os.path.splitext(fil)[-1].replace('.', '') for fil in files]
        ext_f = exts_f[0]
        if not all(map(lambda x: x == ext_f, exts_f)):
            raise click.UsageError('You did not explicitely specify a reader '
                                   'and implicite deduction failed since not '
                                   'all files share the same extension.')

        if not ext_f in READERS:
            raise click.UsageError('I implicitely deduced that you want to '
                                   'use the %s reader. Unfortunately, this '
                                   'reader is not supported. The available '
                                   'readers are:\n%s' % (ext_f,
                                                         ', '.join(READERS))
                                   )
        f = ext_f

    if not t:
        if not o:
            raise click.UsageError('Cannot implicitely deduce writer. '
                                   'specify writer "-t" or output file "-o".')

        fn_o = o.name
        ext_t = os.path.splitext(fn_o)[-1].replace('.', '')
        if not ext_t in WRITERS:
            raise click.UsageError('I implicitely deduced that you want to '
                                   'use the %s writer. Unfortunately, this '
                                   'writer is not supported. The available '
                                   'writers are:\n%s' % (ext_t,
                                                         ', '.join(WRITERS))
                                   )
        t = ext_t

    return f, t

@click.group()
def cli():
    """ Small command line tool for combining and converting
    bibliographic data
    """
    pass

@click.command('append',
               short_help='append multiple databases')
@click.option('-f',
              type=click.Choice(READERS.keys()),
              help='from file format')
@click.option('-t',
              type=click.Choice(WRITERS.keys()),
              help='to file format')
@click.option('-o',
              type=click.File('w'),
              help='path to file for output')
@click.argument('files', nargs=-1)
def append(f, t, o, files):
    """ Concatenates the bibliographies
    """
    f, t = get_formats(f, t, o, files)
    
    dump = WRITERS[t]
    
    data = [load(f, fin) for fin in files]
    
    data = [x for sub in data for x in sub]

    datastring = dump(data)
    if o:
        o.write(datastring)
    else:
        click.echo(datastring)

@click.command('merge',
               short_help='merge databases')
@click.option('-f',
              type=click.Choice(READERS.keys()),
              help='from file format')
@click.option('-t',
              type=click.Choice(WRITERS.keys()),
              help='to file format')
@click.option('-o',
              type=click.File('w'),
              help='path to file for output')
@click.argument('files', nargs=-1)
def merge(f, t, o, files):
    f, t = get_formats(f, t, o, files)
    
    dump = WRITERS[t]
    
    data = [load(f, fin) for fin in files]
    
    pass

cli.add_command(append)
cli.add_command(merge)

if __name__ == '__main__':
    cli()